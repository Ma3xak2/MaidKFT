import logging
import re
from telegram import Update
from telegram.ext import ContextTypes

from config.config_loader import load_config, save_actions

logger = logging.getLogger(__name__)

ADMINS_CACHE: list[int] | None = None  # –∫—ç—à –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏


def _get_admins() -> list[int]:
    global ADMINS_CACHE
    if ADMINS_CACHE is None:
        cfg = load_config()
        ADMINS_CACHE = cfg.get("ADMINS", [])
    return ADMINS_CACHE


async def add_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in _get_admins():
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if len(context.args) == 0 or ':' not in ' '.join(context.args):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addact –∫–æ–º–∞–Ω–¥–∞: —à–∞–±–ª–æ–Ω")
        return

    text = ' '.join(context.args)
    parts = text.split(':', 1)
    action = parts[0].strip().lower()
    template = parts[1].strip()

    try:
        # –ó–∞–≥—Ä—É–∑–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –æ–±–Ω–æ–≤–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
        cfg = load_config()
        actions = cfg.get("ACTIONS", {})
        if action in actions:
            await update.message.reply_text(f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ ¬´{action}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        actions[action] = template
        save_actions(actions)
        # –°–±—Ä–æ—Å–∏–º –∫—ç—à –∞–¥–º–∏–Ω–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ ADMINS –≤ config.yaml)
        global ADMINS_CACHE
        ADMINS_CACHE = None

        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ¬´{action}¬ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.")


async def delete_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in _get_admins():
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delact –∫–æ–º–∞–Ω–¥–∞")
        return

    action = ' '.join(context.args).strip().lower()

    try:
        cfg = load_config()
        actions = cfg.get("ACTIONS", {})

        if action not in actions:
            await update.message.reply_text(f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ ¬´{action}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        del actions[action]
        save_actions(actions)
        # –°–±—Ä–æ—Å–∏–º –∫—ç—à –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
        global ADMINS_CACHE
        ADMINS_CACHE = None

        await update.message.reply_text(f"üóëÔ∏è –î–µ–π—Å—Ç–≤–∏–µ ¬´{action}¬ª —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.")
