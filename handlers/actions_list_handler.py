# handlers/actions_list_handler.py

import math
import logging

from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CallbackQueryHandler

from config.config_loader import load_actions_normalized

logger = logging.getLogger(__name__)

# –°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
ITEMS_PER_PAGE = 20

# –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—Å—Ç–∏–Ω–≥–æ–º
ACTION_DELETE_TIMEOUT = 180

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (job) —É–¥–∞–ª–µ–Ω–∏—è:
# –∫–ª—é—á = (chat_id, message_id), –∑–Ω–∞—á–µ–Ω–∏–µ = Job
ACTION_JOBS: dict[tuple[int, int], object] = {}


def _build_page_text(actions_dict: dict[str, str], page: int) -> tuple[str, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç_—Å—Ç—Ä–∞–Ω–∏—Ü—ã, total_pages).
    """
    keys = sorted(actions_dict.keys())
    total_items = len(keys)
    total_pages = math.ceil(total_items / ITEMS_PER_PAGE) if total_items > 0 else 1

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, total_pages-1]
    page = page % total_pages

    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    slice_keys = keys[start:end]

    if not slice_keys:
        text = "‚ùóÔ∏è –î–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        lines = []
        for key in slice_keys:
            template = actions_dict[key]
            lines.append(f"‚Ä¢ <b>{key}</b>: {template}")
        text = "\n".join(lines)

    return text, total_pages


def _build_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    prev_page = (page - 1) % total_pages
    next_page = (page + 1) % total_pages

    buttons = [
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"actions:page:{prev_page}"),
        InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å", callback_data="actions:delete"),
        InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"actions:page:{next_page}")
    ]
    return InlineKeyboardMarkup([buttons])


async def _delete_message_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø—É—Å–∫–∞–µ—Ç job_queue: —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ ACTION_JOBS.
    """
    data = context.job.data
    chat_id = data.get("chat_id")
    message_id = data.get("message_id")

    if chat_id is None or message_id is None:
        return

    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (job): {e}")

    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏—Ö –∑–∞–¥–∞—á
    ACTION_JOBS.pop((chat_id, message_id), None)


async def list_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—Å—Ç–∏–Ω–≥–æ–º –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ actions.yaml,
    —É–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–∑—É —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ ACTION_DELETE_TIMEOUT —Å–µ–∫—É–Ω–¥.
    """
    # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    if update.message:
        try:
            await update.message.delete()
        except Exception:
            pass

    actions = load_actions_normalized()
    page = 0
    text, total_pages = _build_page_text(actions, page)
    keyboard = _build_keyboard(page, total_pages)

    try:
        bot_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                f"üìñ –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π "
                f"(—Å—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page+1}</b> –∏–∑ <b>{total_pages}</b>):\n\n"
                f"{text}"
            ),
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π: {e}")
        return

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ACTION_DELETE_TIMEOUT —Å–µ–∫—É–Ω–¥
    job = context.job_queue.run_once(
        _delete_message_job,
        ACTION_DELETE_TIMEOUT,
        data={'chat_id': bot_message.chat.id, 'message_id': bot_message.message_id}
    )
    ACTION_JOBS[(bot_message.chat.id, bot_message.message_id)] = job


async def actions_pagination_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –ø–æ inline-–∫–Ω–æ–ø–∫–∞–º ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª, ¬´–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è¬ª –∏ ¬´‚ùå –£–±—Ä–∞—Ç—å¬ª.
    –ü—Ä–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è –∏ —Å—Ç–∞–≤–∏—Ç –Ω–æ–≤—É—é.
    """
    query = update.callback_query
    if not query or not query.data:
        return

    data = query.data  # —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "actions:page:2" –∏–ª–∏ "actions:delete"
    await query.answer()  # —Å–∫—Ä—ã–≤–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª

    chat_id = query.message.chat.id
    message_id = query.message.message_id

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´‚ùå –£–±—Ä–∞—Ç—å¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω—è–µ–º job
    if data == "actions:delete":
        # –û—Ç–º–µ–Ω—è–µ–º —Ä–∞–Ω–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        job = ACTION_JOBS.pop((chat_id, message_id), None)
        if job:
            job.schedule_removal()
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—Å—Ç–∏–Ω–≥–æ–º: {e}")
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ ¬´actions:page:N¬ª ‚Äî –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if data.startswith("actions:page:"):
        try:
            page = int(data.split(":")[-1])
        except ValueError:
            return

        actions = load_actions_normalized()
        text, total_pages = _build_page_text(actions, page)
        keyboard = _build_keyboard(page, total_pages)

        new_text = (
            f"üìñ –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π "
            f"(—Å—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page+1}</b> –∏–∑ <b>{total_pages}</b>):\n\n"
            f"{text}"
        )

        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª–∞)
        old_job = ACTION_JOBS.pop((chat_id, message_id), None)
        if old_job:
            old_job.schedule_removal()

        try:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=new_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π: {e}")
            return

        # –°—Ç–∞–≤–∏–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        job = context.job_queue.run_once(
            _delete_message_job,
            ACTION_DELETE_TIMEOUT,
            data={'chat_id': chat_id, 'message_id': message_id}
        )
        ACTION_JOBS[(chat_id, message_id)] = job
        return

    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    return


def get_actions_callback_handler() -> CallbackQueryHandler:
    return CallbackQueryHandler(actions_pagination_handler, pattern=r"^actions:(?:page:\d+|delete)$")
