import logging
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler

from config.config_loader import load_config
from handlers.admin_handler import add_action, delete_action
from handlers.command_handler import CustomCommandHandler
from handlers.mute_handler import MuteManager
from handlers.actions_handler import handle_actions  # handle_actions –≤—Å–µ–≥–¥–∞ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ–∂–∏–π actions.yaml

# –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏–π
from handlers.actions_list_handler import list_actions, get_actions_callback_handler

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –∫–æ–Ω—Ñ–∏–≥–æ–º, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ
CONFIG = load_config()


def get_config() -> dict:
    return CONFIG


def reload_config() -> None:
    global CONFIG
    CONFIG = load_config()
    # –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –æ–Ω –≥–¥–µ-—Ç–æ –∫—ç—à–∏—Ä—É–µ—Ç—Å—è.
    # –í handlers/admin_handler.ADMINS_CACHE –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å:
    try:
        from handlers.admin_handler import ADMINS_CACHE
        ADMINS_CACHE = None
    except ImportError:
        pass

    logger.info("üîÑ –ö–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")


async def reload_command(update, context) -> None:
    user_id = update.effective_user.id
    admins = get_config().get("ADMINS", [])
    if user_id not in admins:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    reload_config()
    await update.message.reply_text("üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.")


def main() -> None:
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    config = get_config()
    token = config.get("BOT_TOKEN")
    if not token:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ config.yaml")
        return

    app = ApplicationBuilder().token(token).build()

    # 0. –ú–µ–Ω–µ–¥–∂–µ—Ä ¬´–∫–ª—è–ø–∞¬ª
    mute_mgr = MuteManager(get_config)
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, mute_mgr.handle_message),
        group=0
    )

    # 1. RP-–¥–µ–π—Å—Ç–≤–∏—è (handle_actions –∫–∞–∂–¥—ã–π —Ä–∞–∑ —á–∏—Ç–∞–µ—Ç —Å–≤–µ–∂–∏–π actions.yaml)
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_actions),
        group=1
    )

    # 2. –ö–æ–º–∞–Ω–¥—ã –∏–∑ CONFIG["COMMANDS_CONFIG"]
    cmd_handler = CustomCommandHandler(get_config)
    for cmd_name in config.get("COMMANDS_CONFIG", {}):
        app.add_handler(
            CommandHandler(cmd_name, cmd_handler.handle, block=False),
            group=2
        )

    # 3. –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: /reload, /addact, /delact
    app.add_handler(CommandHandler("reload", reload_command), group=2)
    app.add_handler(CommandHandler("addact", add_action), group=2)
    app.add_handler(CommandHandler("delact", delete_action), group=2)

    # 4. –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /actions ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    app.add_handler(CommandHandler("actions", list_actions), group=2)
    # 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ (CallbackQuery) –æ—Ç /actions
    app.add_handler(get_actions_callback_handler(), group=2)

    app.run_polling()


if __name__ == "__main__":
    main()
